name: CICD

on:
  push:
    paths-ignore:
    - 'paper/**'
    - '.github/workflows/joss.yml'
    - '*.md'

jobs:

  test:
    name: Test the code
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go 1.x
        if: success()
        uses: actions/setup-go@v2
        with:
          go-version: ^1.14
        id: go

      - name: Check out code
        if: success()
        uses: actions/checkout@v2

      - name: Run tests
        if: success()
        run: go test -v ./...

  build:
    name: Build and upload snapshots
    runs-on: ubuntu-latest
    needs: test
    steps:

      - name: Set up Go 1.x
        if: success()
        uses: actions/setup-go@v2
        with:
          go-version: ^1.14
        id: go

      - name: Check out code
        if: success()
        uses: actions/checkout@v2

      - name: Prepare Variables
        id: prepare
        run: |
          echo ::set-output name=version::${GITHUB_REF##*/}

      - name: Cross Compile go
        if: success()
        run: |
          curl -s https://raw.githubusercontent.com/linksmart/ci-scripts/master/go/go-build.sh | bash
          mkdir -p output/bin output/conf
          cp bin/* output/bin
          cp sample_conf/* wot/wot_td_schema.json output/conf
        env:
          NAME: thing-directory
          VERSION: ${{ steps.prepare.outputs.version }}
          BUILDNUM: ${{github.run_number}}

      - name: Upload snapshots
        if: success()
        uses: actions/upload-artifact@v2
        with: 
          name: snapshots
          path: output/

  package-and-release:
    name: Build debian packages and upload release assets
    if: github.ref != 'refs/heads/master' && startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: build
    env:
      NAME: thing-directory
      MAINAINER: LinkSmart <info@linksmart.eu>
      DESCRIPTION: WoT Thing Directory by LinkSmart
      EXEARGUMENTS: --conf /etc/thing-directory/settings.json --schema /etc/thing-directory/wot_td_schema.json
      COPYCONFIG: ../conf/settings.json.dpkg-new ../conf/wot_td_schema.json.dpkg-new
      CONFIGREPLACEASK: settings.json wot_td_schema.json
      BUILDNUMBER: ${{github.run_number}}
      DATADIR: /var/lib/thing-directory
      ENVIROMENTVARS: DISABLE_LOG_TIME=true
      LOGOUTPUT: syslog

    steps:

      - name: Prepare Variables
        id: prepare
        run: |
          echo ::set-output name=version::${GITHUB_REF##*/}

      - name: Download snapshot artifacts
        uses: actions/download-artifact@v2
        with: 
          name: snapshots

      - name: Prepare for creating debian packages
        if: success()
        run: |
          mkdir Builds
          echo "jq '.storage.dsn = \"$DATADIR\"' conf/thing-directory.json > conf/settings.json.dpkg-new" | bash
          cp conf/wot_td_schema.json conf/wot_td_schema.json.dpkg-new

      - name: Create DEB for Debian amd64
        id: deb-linux-amd64
        if: success()
        run: |
          mkdir dpkg
          cd dpkg
          curl -s https://raw.githubusercontent.com/linksmart/ci-scripts/master/deb/control-build.sh | bash
          curl -s https://raw.githubusercontent.com/linksmart/ci-scripts/master/deb/pre-post-build.sh | bash
          curl -s https://raw.githubusercontent.com/linksmart/ci-scripts/master/deb/service-build.sh | bash
          curl -s https://raw.githubusercontent.com/linksmart/ci-scripts/master/deb/build-deb.sh | bash
          cd ..
          rm -r dpkg
        env:
          VERSION: ${{ steps.prepare.outputs.version }}
          PLATFORM: amd64
          EXEPATH: thing-directory-linux-amd64
          COPYEXEC: ../bin/thing-directory-linux-amd64

      - name: Create DEB for Debian arm
        id: deb-linux-arm
        if: success()
        run: |
          mkdir dpkg
          cd dpkg
          curl -s https://raw.githubusercontent.com/linksmart/ci-scripts/master/deb/control-build.sh | bash
          curl -s https://raw.githubusercontent.com/linksmart/ci-scripts/master/deb/pre-post-build.sh | bash
          curl -s https://raw.githubusercontent.com/linksmart/ci-scripts/master/deb/service-build.sh | bash
          curl -s https://raw.githubusercontent.com/linksmart/ci-scripts/master/deb/build-deb.sh | bash
          cd ..
          rm -r dpkg
        env:
          VERSION: ${{ steps.prepare.outputs.version }}
          PLATFORM: armhf
          EXEPATH: thing-directory-linux-arm
          COPYEXEC: ../bin/thing-directory-linux-arm

      - name: Create DEB for Debian arm64
        id: deb-linux-arm64
        if: success()
        run: |
          mkdir dpkg
          cd dpkg
          curl -s https://raw.githubusercontent.com/linksmart/ci-scripts/master/deb/control-build.sh | bash
          curl -s https://raw.githubusercontent.com/linksmart/ci-scripts/master/deb/pre-post-build.sh | bash
          curl -s https://raw.githubusercontent.com/linksmart/ci-scripts/master/deb/service-build.sh | bash
          curl -s https://raw.githubusercontent.com/linksmart/ci-scripts/master/deb/build-deb.sh | bash
          cd ..
          rm -r dpkg
        env:
          VERSION: ${{ steps.prepare.outputs.version }}
          PLATFORM: arm64
          EXEPATH: thing-directory-linux-arm64
          COPYEXEC: ../bin/thing-directory-linux-arm64

      - name: Create Release
        if: success()
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.prepare.outputs.version }}
          release_name: ${{ steps.prepare.outputs.version }}
          body: "Docker image: `linksmart/td:${{ steps.prepare.outputs.version }}`"
          draft: false
          prerelease: true

      - name: Upload release asset windows-amd64.exe
        if: success()
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: bin/thing-directory-windows-amd64.exe
          asset_name: thing-directory-windows-amd64.exe
          asset_content_type: application/vnd.microsoft.portable-executable

      - name: Upload release asset darwin-amd64
        if: success()
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: bin/thing-directory-darwin-amd64
          asset_name: thing-directory-darwin-amd64
          asset_content_type: application/octet-stream

      - name: Upload release asset linux-amd64
        if: success()
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: bin/thing-directory-linux-amd64
          asset_name: thing-directory-linux-amd64
          asset_content_type: application/octet-stream
      
      - name: Upload release asset linux-arm64
        if: success()
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: bin/thing-directory-linux-arm64
          asset_name: thing-directory-linux-arm64
          asset_content_type: application/octet-stream

      - name: Upload release asset linux-arm
        if: success()
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: bin/thing-directory-linux-arm
          asset_name: thing-directory-linux-arm
          asset_content_type: application/octet-stream

      - name: Upload release asset sample_conf
        if: success()
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: conf/thing-directory.json
          asset_name: thing-directory.json
          asset_content_type: application/json

      - name: Upload release asset linux-amd64.deb
        if: success()
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: Builds/${{ steps.deb-linux-amd64.outputs.debuilderfile }}
          asset_name: ${{ steps.deb-linux-amd64.outputs.debuilderfile }}
          asset_content_type: application/x-deb

      - name: Upload release asset linux-arm.deb
        if: success()
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: Builds/${{ steps.deb-linux-arm.outputs.debuilderfile }}
          asset_name: ${{ steps.deb-linux-arm.outputs.debuilderfile }}
          asset_content_type: application/x-deb

      - name: Upload release asset linux-arm64.deb
        if: success()
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: Builds/${{ steps.deb-linux-arm64.outputs.debuilderfile }}
          asset_name: ${{ steps.deb-linux-arm64.outputs.debuilderfile }}
          asset_content_type: application/x-deb

  docker:
    name: Build and push docker image
    runs-on: ubuntu-latest
    needs: test
    steps:

      - name: Prepare Variables
        id: prepare
        run: |
          echo ::set-output name=version::${GITHUB_REF##*/}

      - name: Check out code
        if: success()
        uses: actions/checkout@v2

      - name: Docker login
        if: success()
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USER }}" --password-stdin

      - name: Build image
        if: success()
        run: docker build -t linksmart/td --build-arg version="${{ steps.prepare.outputs.version }}" --build-arg buildnum="${{github.run_number}}" .

      - name: Push latest docker image
        if: success() && github.ref == 'refs/heads/master'
        run: docker push linksmart/td:latest

      - name: Push tagged docker image
        if: success() && github.ref != 'refs/heads/master' && startsWith(github.ref, 'refs/tags/')
        run: |
          docker tag linksmart/td linksmart/td:${{ steps.prepare.outputs.version }}
          docker push linksmart/td:${{ steps.prepare.outputs.version }}
